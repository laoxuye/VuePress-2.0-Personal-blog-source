import{_ as p,M as o,p as c,q as l,R as n,N as e,V as t,t as s,a1 as i}from"./framework-de73eade.js";const u={},d=n("h1",{id:"类型转换",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#类型转换","aria-hidden":"true"},"#"),s(" 类型转换")],-1),r={class:"table-of-contents"},k=i(`<p>JavaScript 作为一种弱类型的语言，不用像 C 语言那样要定义好数据类型，因为允许变量类型的 隐式类型转换 和允许 强制类型转换。我们在定义一个变量的时候，只需一个 <code>var</code>、<code>let</code>、<code>const</code> 搞定，不用担心数据的类型。</p><h2 id="基本规则" tabindex="-1"><a class="header-anchor" href="#基本规则" aria-hidden="true">#</a> 基本规则</h2><p>从 ECMAScript Standard 中了解 Number、String、Boolean、Array 和 Object 之间的相互转换会更加直观。</p><h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring" aria-hidden="true">#</a> ToString</h3><blockquote><p>此处所说的 ToString 并非对象的 <code>toString()</code> 方法，而是指其他类型的值转换为字符串类型的操作。</p></blockquote><p>下面列出常见转换为 String 类型的规则：</p><ul><li><code>null</code>：转为 <code>&quot;null&quot;</code></li><li><code>undefined</code>：转为 <code>&quot;undefined&quot;</code></li><li>Boolean 类型： <ul><li><code>true</code> 转为 <code>&quot;true&quot;</code></li><li><code>false</code> 转为 <code>&quot;false&quot;</code></li></ul></li><li>Number 类型：转为数字的字符串形式 <ul><li>如 <code>10</code> 转为 <code>&quot;10&quot;</code></li><li><code>1e21</code> 转为 <code>&quot;1e+21&quot;</code></li></ul></li><li>Array 类型：转为字符串将各元素以小写逗号 , 连接，相当于调用数组 <code>Array.prototype.join()</code> 方法 <ul><li>空数组转为空字符串 <code>&#39;&#39;</code></li><li>数组中 <code>null</code> 和 <code>undefined</code> 会被当作 <strong>空字符串</strong> 处理</li></ul></li><li>普通对象：转为字符串相当于直接使用 <code>Object.prototype.toString()</code>，返回 <code>[object Object]</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;null&quot;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;undefined&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;true&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;10&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token number">1e21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;1e+21&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;1,2,3&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;1,,3&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;[object Objecr]&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tonumber" tabindex="-1"><a class="header-anchor" href="#tonumber" aria-hidden="true">#</a> ToNumber</h3><ul><li><code>null</code>： 转为 <code>0</code></li><li><code>undefined</code>：转为 <code>NaN</code></li><li>String 类型：如果是纯数字形式，则转为对应的数字 <ul><li>空字符转为 <code>0</code></li><li>否则一律按转换失败处理，转为 <code>NaN</code></li></ul></li><li>Boolean 类型： <ul><li><code>true</code> 将被转为 <code>1</code></li><li><code>false</code> 将被转为 <code>0</code></li></ul></li><li>Array 类型：数组首先会被转为 <strong>原始数据类型</strong>，也就是 ToPrimitive，然后在根据转换后的原始类型按照上面的规则处理</li><li>对象：同数组的处理</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 0</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// NaN</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 10</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;10a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// NaN</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 0</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 0</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 0</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 1</span>

<span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="toboolean" tabindex="-1"><a class="header-anchor" href="#toboolean" aria-hidden="true">#</a> ToBoolean</h3><p>JavaScript 中假值只有 <code>false</code>、<code>null</code>、<code>undefined</code>、<code>&quot;&quot;</code>、<code>0</code> 和 <code>NaN</code>，其他值转为 Boolean 类型都为 <code>true</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// false</span>

<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// false</span>

<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// flase</span>

<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// flase</span>

<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// flase</span>

<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// true</span>

<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// true</span>

<span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="toprimitive" tabindex="-1"><a class="header-anchor" href="#toprimitive" aria-hidden="true">#</a> ToPrimitive</h3><blockquote><p>ToPrimitive 方法用于将引用类型转换为原始数据类型的操作</p></blockquote><p>当值为引用数据类型时，JavaScript 内置的 <code>@@ToPrimitive(hint)</code> 方法会被调用，以确定该值的最终目标类型。此方法接收一个 <code>hint</code> 参数，用于指示转换的方向，例如是否将该值转换为字符串或数字。通过使用 <code>@@ToPrimitive(hint)</code> 方法，JavaScript 可以保证在不同的类型间转换时的一致性和稳定性。</p><ul><li>如果传入值为 Number 类型，则调用对象的 <code>valueOf()</code> 方法，若返回值为原始数据类型，则结束 <code>@@ToPrimitive</code> 操作，如果返回的不是原始数据类型，则继续调用对象的 <code>toString()</code> 方法，若返回值为原始数据类型，则结束 <code>@@ToPrimitive</code> 操作，如果返回的还是引用数据类型，则抛出异常。</li><li>如果传入值为 String 类型，则先调用 <code>toString()</code> 方法，再调用 <code>valueOf()</code> 方法。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span>
  <span class="token string">&#39;1,2&#39;</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">// true</span>
    <span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;[1,2]&quot;</span>
    <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1,2&quot;</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
a <span class="token operator">==</span> <span class="token string">&#39;[object Object]&#39;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
a<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;[object Object]&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于不同类型的引用数据类型，ToPrimitive 的规则有所差异。例如，当处理 Date 对象时，该方法将会优先调用 toString() 方法。更详细的信息可以在 ECMAScript6 规范中对 ToPrimitive 的详细定义与解释中找到。在不同类型间转换时，了解 ToPrimitive 的规则是十分重要的，可以帮助我们更好地处理数据类型转换问题。</p><h2 id="显式类型转换" tabindex="-1"><a class="header-anchor" href="#显式类型转换" aria-hidden="true">#</a> 显式类型转换</h2><p>通过手动进行类型转换，JavaScript 提供了以下转型函数：</p><ul><li>转换为数值类型 <ul><li><code>Number(mix)</code></li><li><code>parseInt(string, radix)</code></li><li><code>parseFloat(string)</code></li></ul></li><li>转换为字符串类型 <ul><li><code>toString(radix)</code></li><li><code>String(mix)</code></li></ul></li><li>转换为布尔类型 <ul><li><code>Boolean(mix)</code></li></ul></li></ul><h2 id="隐式类型转换" tabindex="-1"><a class="header-anchor" href="#隐式类型转换" aria-hidden="true">#</a> 隐式类型转换</h2><p>在 JavaScript 中，当运算符在运算时，如果 <strong>两边数据不统一</strong>，CPU 就无法运算，这时我们编译器会自动将运算符两边的数据做一个数据类型转换，转成相同的数据类型再计算。</p><p>这种无需开发者手动转换，而由 <strong>编译器自动转换</strong> 的方式就称为 <strong>隐式类型转换</strong>。</p><p>JavaScript 的数据类型隐式转换主要分为三种情况：</p><ul><li>转换为 Boolean 类型</li><li>转换为 Number 类型</li><li>转换为 String 类型</li></ul><p>值在 <strong>逻辑判断</strong> 和 <strong>逻辑运算</strong> 时会隐式转换为 Boolean 类型。</p><p>Boolean 类型转换规则表：</p><table><thead><tr><th>数据值</th><th>转换后的值</th></tr></thead><tbody><tr><td>数字 <code>0</code></td><td><code>false</code></td></tr><tr><td><code>NaN</code></td><td><code>false</code></td></tr><tr><td>空字符串 <code>&quot;&quot;</code></td><td><code>false</code></td></tr><tr><td><code>null</code></td><td><code>false</code></td></tr><tr><td><code>undefined</code></td><td><code>false</code></td></tr><tr><td>非 <code>!0</code> 数字</td><td><code>true</code></td></tr><tr><td>非空字符串 <code>!&quot;&quot;</code></td><td><code>true</code></td></tr><tr><td>非 <code>!null</code> 对象类型</td><td><code>true</code></td></tr></tbody></table><p>**注意事项：**使用 new 运算符创建的对象隐式转换为 Boolean 类型的值都是 <code>true</code>。</p><p>连续两个非操作可以将一个数强制转换为 Boolean 类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token comment">// false</span>

<span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// false</span>

<span class="token operator">!</span><span class="token operator">!</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// true</span>

<span class="token operator">!</span><span class="token operator">!</span><span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// false</span>

<span class="token operator">!</span><span class="token operator">!</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// true</span>

<span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// true</span>

<span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// true</span>

<span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="运行环境" tabindex="-1"><a class="header-anchor" href="#运行环境" aria-hidden="true">#</a> 运行环境</h3><p>很多内置函数期望传入的参数的数据类型是固定的，如 <code>alert(value)</code>，它期望传入的 <code>value</code> 为 String 类型，但是如果我们传入的是 Number 类型或者 Object 类型等非 String 类型的数据的时候，就会发生数据类型的隐式转换。这就是环境运行环境对数据类型转换的影响。</p><p>类似的方法还有：</p><ul><li><code>alert()</code></li><li><code>parseInt()</code></li></ul><h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h3><h4 id="加号运算符" tabindex="-1"><a class="header-anchor" href="#加号运算符" aria-hidden="true">#</a> 加号运算符</h4><p>当加号运算符作为一元运算符运算值时，它会将该值转换为 Number 类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39; &#39;</span> <span class="token operator">+</span>
<span class="token comment">// 0</span>

<span class="token string">&#39;0&#39;</span> <span class="token operator">+</span>
<span class="token comment">// 0</span>

<span class="token string">&#39;10&#39;</span> <span class="token operator">+</span>
<span class="token comment">// 10</span>

<span class="token string">&#39;String&#39;</span> <span class="token operator">+</span>
<span class="token comment">// NaN</span>

<span class="token boolean">true</span> <span class="token operator">+</span>
<span class="token comment">// 1</span>

<span class="token boolean">false</span> <span class="token operator">+</span>
<span class="token comment">// 0</span>

<span class="token keyword">undefined</span> <span class="token operator">+</span>
<span class="token comment">// 0</span>

<span class="token keyword">null</span> <span class="token operator">+</span>
<span class="token comment">// 0</span>

<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span>
<span class="token comment">// 0</span>

<span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span>
<span class="token comment">// 0</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span>
<span class="token comment">// 1</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span>
<span class="token comment">// NaN</span>

<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span>
<span class="token comment">// 1</span>

<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span>
<span class="token comment">// NaN</span>

<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span>
<span class="token comment">// NaN</span>

<span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// NaN</span>

<span class="token operator">+</span><span class="token string">&#39;&#39;</span> <span class="token operator">+</span>
<span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当加号运算符作为二元运算符操作值时，它会根据两边值类型进行数据类型隐式转换。</p><p>首先，当引用对象类型的值进行二元加号运算符运算时，会涉及到转换为原始数据类型的问题。事实上，当一个对象执行例如加法操作的时候，如果它是原始类型，那么就不需要转换。否则，将遵循以下规则：</p><ul><li>调用实例的 <code>valueOf()</code> 方法，如果有返回的是基础类型，停止下面的过程；否则继续</li><li>调用实例的 <code>toString()</code> 方法，如果有返回的是基础类型，停止下面的过程；否则继续</li><li>都没返回原始类型，就会报错</li></ul><p>如果运算符两边均为原始数据类型时，则按照以下规则解释：</p><ul><li>字符串连接符：如果两个操作数中只要存在一个操作数为 String 类型，那么另一个操作数会调用 <code>String()</code> 方法转成字符串然后拼接</li><li>算术运算符：如果两个操作数都不是 String 类型，两个操作数会调用 <code>Number()</code> 方法隐式转换为 Number 类型（如果无法成功转换成数字，则变为 <code>NaN</code>，再往下操作），然后进行加法算术运算</li></ul><p>值转换为 Number 类型和 String 类型都会遵循一个原则：如果该值为原始数据类型，则直接转换为 String 类型或 Number 类型。如果该值为引用数据类型，那么先通过固定的方法将复杂值转换为原始数据类型，再转为 String 类型或 Number 类型。ToPrimitive</p><p>**注意事项：**当 <code>{} + 任何值</code> 时， 前一个 <code>{}</code> 都会被 JavaScript 解释成空块并忽略他。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;1&quot;</span> <span class="token operator">+</span> <span class="token number">1</span>             <span class="token comment">// &quot;11&quot;</span>
<span class="token string">&quot;1&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;1&quot;</span>           <span class="token comment">// &quot;11&quot;</span>
<span class="token string">&quot;1&quot;</span> <span class="token operator">+</span> <span class="token boolean">true</span>          <span class="token comment">// &quot;1true&quot;</span>
<span class="token string">&quot;1&quot;</span> <span class="token operator">+</span> <span class="token number">NaN</span>           <span class="token comment">// &quot;NaN&quot;</span>
<span class="token string">&quot;1&quot;</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment">// &quot;1&quot;</span>
<span class="token string">&quot;1&quot;</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token comment">// &quot;1[object Object]&quot;</span>
<span class="token string">&quot;1&quot;</span> <span class="token operator">+</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment">// &quot;1function(){}&quot;</span>
<span class="token string">&quot;1&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// &quot;1false&quot;</span>

<span class="token number">1</span> <span class="token operator">+</span> <span class="token number">NaN</span>             <span class="token comment">// NaN</span>
<span class="token number">1</span> <span class="token operator">+</span> <span class="token string">&quot;true&quot;</span>          <span class="token comment">// &quot;1true&quot;</span>
<span class="token number">1</span> <span class="token operator">+</span> <span class="token boolean">true</span>            <span class="token comment">// 2</span>
<span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">undefined</span>       <span class="token comment">// NaN</span>
<span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">null</span>            <span class="token comment">// 1</span>

<span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>              <span class="token comment">// &quot;1&quot;</span>
<span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>          <span class="token comment">// &quot;11,2&quot;</span>
<span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>              <span class="token comment">// &quot;1[object Object]&quot;</span>
<span class="token number">1</span> <span class="token operator">+</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment">// &quot;1function(){}&quot;</span>
<span class="token number">1</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 1</span>
<span class="token number">1</span> <span class="token operator">+</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// &quot;1&quot;</span>

<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>             <span class="token comment">// &quot;&quot;</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>             <span class="token comment">// &quot;[object Object][object Object]&quot;</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>             <span class="token comment">// 0</span>
<span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token number">1</span>          <span class="token comment">// 1</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>             <span class="token comment">// &quot;[object Object]&quot;</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token operator">!</span><span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token comment">// &quot;false&quot;</span>
<span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment">// &quot;false&quot;</span>
<span class="token string">&#39;&#39;</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>             <span class="token comment">// &quot;[object Object]&quot;</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">+</span> <span class="token string">&#39;&#39;</span>             <span class="token comment">// 0</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;map&quot;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token comment">// &quot;function map(){ [native code] }&quot;</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment">// &quot;undefined&quot;</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>         <span class="token comment">// &quot;undefined&quot;</span>
<span class="token operator">+</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>          <span class="token comment">// 1</span>
<span class="token operator">+</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span>               <span class="token comment">// 1</span>
<span class="token number">1</span><span class="token operator">-</span><span class="token punctuation">{</span><span class="token punctuation">}</span>                <span class="token comment">// NaN</span>
<span class="token number">1</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token comment">// 1</span>
<span class="token boolean">true</span> <span class="token operator">-</span> <span class="token number">1</span>            <span class="token comment">// 0</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">-</span> <span class="token number">1</span>              <span class="token comment">// -1</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>           <span class="token comment">// true</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;push&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token comment">// 1</span>

<span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>       <span class="token comment">// &quot;f&quot;</span>
<span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>     <span class="token comment">// &quot;a&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="相等运算符" tabindex="-1"><a class="header-anchor" href="#相等运算符" aria-hidden="true">#</a> 相等运算符</h4><p>相等运算符 <code>==</code> 会对操作值进行隐式转换后进行比较</p><ul><li>如果其中一个操作值为布尔值，则在比较之前先将其转换为数值</li><li>如果其中一个操作值为字符串，另一个操作值为数值，则通过 <code>Number()</code> 函数将字符串转换为数值</li><li>如果其中一个操作值是对象，另一个不是，则调用对象的 <code>valueOf()</code> 方法，得到的结果按照前面的规则进行比较</li><li><code>null</code> 与 <code>undefined</code> 是相等的</li><li>如果一个操作值为 <code>NaN</code>，则返回 <code>false</code></li><li>如果两个操作值都是对象，则比较它们是不是指向同一个对象</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;1&#39;</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token string">&#39;1&#39;</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token string">&#39;1&#39;</span> <span class="token operator">==</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token string">&#39;1&#39;</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
nul <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符" aria-hidden="true">#</a> 关系运算符</h4>`,55);function m(v,b){const a=o("router-link");return c(),l("div",null,[d,n("nav",r,[n("ul",null,[n("li",null,[e(a,{to:"#基本规则"},{default:t(()=>[s("基本规则")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#tostring"},{default:t(()=>[s("ToString")]),_:1})]),n("li",null,[e(a,{to:"#tonumber"},{default:t(()=>[s("ToNumber")]),_:1})]),n("li",null,[e(a,{to:"#toboolean"},{default:t(()=>[s("ToBoolean")]),_:1})]),n("li",null,[e(a,{to:"#toprimitive"},{default:t(()=>[s("ToPrimitive")]),_:1})])])]),n("li",null,[e(a,{to:"#显式类型转换"},{default:t(()=>[s("显式类型转换")]),_:1})]),n("li",null,[e(a,{to:"#隐式类型转换"},{default:t(()=>[s("隐式类型转换")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#运行环境"},{default:t(()=>[s("运行环境")]),_:1})]),n("li",null,[e(a,{to:"#运算符"},{default:t(()=>[s("运算符")]),_:1})])])])])]),k])}const g=p(u,[["render",m],["__file","3.html.vue"]]);export{g as default};
