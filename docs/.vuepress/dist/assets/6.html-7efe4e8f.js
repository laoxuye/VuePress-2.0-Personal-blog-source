import{_ as d,p as t,q as e,a1 as o}from"./framework-de73eade.js";const c={},r=o('<h1 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符" aria-hidden="true">#</a> 算术运算符</h1><p>算术运算符使用数值（字面量或者变量）作为操作数进行运算并返回一个数值。</p><p>标准的算术运算符就是加减乘除 <code>+</code>、<code>-</code>、<code>*</code> 和 <code>/</code>。</p><p>当操作数是浮点数时，这些运算符表现得跟它们在大多数编程语言中一样（特殊要注意的是，除零会产生 <code>Infinity</code> ）。</p><table><thead><tr><th>运算符</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>+</code></td><td>加法</td><td><code>1 + 2</code> = <code>3</code></td></tr><tr><td><code>-</code></td><td>减法</td><td><code>2 - 1</code> = <code>1</code></td></tr><tr><td><code>*</code></td><td>乘法</td><td><code>2 * 2</code> = <code>4</code></td></tr><tr><td><code>/</code></td><td>除法</td><td><code>4 / 2</code> = <code>2</code></td></tr><tr><td><code>%</code></td><td>求余，返回相除后余值</td><td>12 % 5 = 2</td></tr><tr><td><code>++</code></td><td>自增（更新运算符），分为前自增和后自增</td><td>具体参考 更新运算符</td></tr><tr><td><code>--</code></td><td>自减（更新运算符），分为前自减和后自减</td><td>具体参考 更新运算符</td></tr><tr><td><code>-</code></td><td>一元负值符，返回操作数的负值</td><td><code>-foo</code></td></tr><tr><td><code>*</code></td><td>一元正值符，若操作数在操作前非数字类型，将试图将其转换成数字类型</td><td><code>+foo</code></td></tr><tr><td><code>**</code></td><td>指数运算符，计算 base（底数） 的 exponent（指数）次方</td><td><code>2 \\*\\* 3 = 8</code></td></tr></tbody></table>',5),a=[r];function n(h,s){return t(),e("div",null,a)}const i=d(c,[["render",n],["__file","6.html.vue"]]);export{i as default};
