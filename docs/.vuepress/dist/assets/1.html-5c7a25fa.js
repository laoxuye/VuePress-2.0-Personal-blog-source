import{_ as t,M as i,p as l,q as p,R as n,N as e,V as o,t as a,a1 as c}from"./framework-de73eade.js";const d={},r=n("h1",{id:"数据类型",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#数据类型","aria-hidden":"true"},"#"),a(" 数据类型")],-1),u={class:"table-of-contents"},v=c(`<p>JavaScript 是一种 <strong>弱类型语言</strong> 或者说 <strong>动态语言</strong>。这意味着你不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。</p><p>这也意味着你可以使用同个相同名称的变量保存不同类型的数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
<span class="token comment">// foo is a Number now</span>

<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// foo is a String now</span>

<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token comment">// foo is a Boolean now</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ECMAScript 标准定义了<strong>原始数据类型</strong>和<strong>引用数据类型</strong>，共七种内置类型：</p><ul><li>原始数据类型（基本类型）：按值访问，可以操作保存在变量中实际的值。 <ul><li>空值（null）</li><li>未定义（undefined）</li><li>布尔值（boolean）</li><li>数字（number）</li><li>字符串（string）</li><li>符号（symbol）</li></ul></li><li>引用类型（复杂数据类型）：引用类型的值是保存在内存中的对象。 <ul><li>对象（Object） <ul><li>布尔对象（Boolean）</li><li>数字对象（Number）</li><li>字符串对象（String）</li><li>函数对象（Function）</li><li>数组对象（Array）</li><li>日期对象（Date）</li><li>正则对象（RegExp）</li><li>错误对象（Error）</li></ul></li></ul></li></ul><p><strong>注意</strong>： 与其他语言不同的是，JavaScript 不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。所以引用类型的值是按引用访问的。</p><h2 id="原始数据类型" tabindex="-1"><a class="header-anchor" href="#原始数据类型" aria-hidden="true">#</a> 原始数据类型</h2><h3 id="空值" tabindex="-1"><a class="header-anchor" href="#空值" aria-hidden="true">#</a> 空值</h3><p>空值 <code>null</code> 是一个字面量，它不像 <code>undefined</code> 是全局对象的一个属性。</p><p><code>null</code> 是表示缺少的标识，指示变量未指向任何对象。把 <code>null</code> 作为尚未创建的对象，也许更好理解</p><p><strong>代码实例：</strong></p><p><code>foo</code> 不存在，它从来没有被定义过或者是初始化过。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>foo<span class="token punctuation">;</span>
<span class="token operator">&gt;</span> <span class="token string">&quot;ReferenceError: foo is not defined&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>foo</code> 现在已经是知存在的，但是它没有类型或者是值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
foo<span class="token punctuation">;</span>
<span class="token operator">&gt;</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="未定义值" tabindex="-1"><a class="header-anchor" href="#未定义值" aria-hidden="true">#</a> 未定义值</h3><p>未定义值 <code>undefined</code> 是全局对象的一个属性。也就是说，它是全局作用域的一个变量。<code>undefined</code> 的最初值就是原始数据类型 <code>undefined</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> foo<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="布尔值" tabindex="-1"><a class="header-anchor" href="#布尔值" aria-hidden="true">#</a> 布尔值</h3><p>布尔类型表示一个逻辑实体，可以有两个值：<code>true</code> 和 <code>false</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数字" tabindex="-1"><a class="header-anchor" href="#数字" aria-hidden="true">#</a> 数字</h3><h4 id="进制数" tabindex="-1"><a class="header-anchor" href="#进制数" aria-hidden="true">#</a> 进制数</h4><ul><li>十进制：JavaScript 中默认的进制数</li><li>八进制：第一位必须是 0，然后是 0-7 的数字组成</li><li>十六进制：前两位必须是 <code>0x</code>，然后是 0-9 及 A-F（字母不区分大小写）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 十进制</span>
<span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

<span class="token comment">// 八进制的56</span>
<span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">070</span><span class="token punctuation">;</span>

<span class="token comment">// 十进制，因为有数字超过了7，这里是79</span>
<span class="token keyword">var</span> num3 <span class="token operator">=</span> <span class="token number">079</span><span class="token punctuation">;</span>

<span class="token comment">// 十六进制的31</span>
<span class="token keyword">var</span> num4 <span class="token operator">=</span> <span class="token number">0x1f</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：</strong> 八进制在严格模式下 &quot;use strict&quot; 是无效的，会导致 JavaScript 报错，避免使用。</p><h4 id="浮点数" tabindex="-1"><a class="header-anchor" href="#浮点数" aria-hidden="true">#</a> 浮点数</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token string">&#39;2.3&#39;</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 0.30000000000000000004</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 229.99999999999997</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面例子表达的就是 JavaScript 的浮点型数据在计算时容易丢失精度，这一点并不仅在 JavaScript 存在，建议处理这方面问题使用专用的数字处理类，比如 Java 里的 BigDecima 类来处理。</p><h4 id="数字的范围" tabindex="-1"><a class="header-anchor" href="#数字的范围" aria-hidden="true">#</a> 数字的范围</h4><p>JavaScript 中数值的范围是有效位数的，基本上够我们使用，我们仅需要知道以下几个知识点：</p><ul><li><code>Number.MIN_VALUE</code> 或 <code>Number.NEGATIVE_INFINITY</code>：表示 JavaScript 中的最小值</li><li><code>Number.MAX_VALUE</code> 或 <code>Number.POSITIVE_INFINITY</code>：表示 JavaScript 中的最大值</li><li><code>Infinity</code>：表示无穷大</li><li><code>-Infinity</code>：表示无穷小</li></ul><h4 id="nan" tabindex="-1"><a class="header-anchor" href="#nan" aria-hidden="true">#</a> NaN</h4><p><code>NaN</code> （Not a number）的含义是本该返回数值的操作未返回数值，返回了 <code>NaN</code> 就不会抛出异常影响语句流畅性。</p><p><code>NaN</code> 属性的初始值就是 <code>NaN</code>，和 <code>Number.NaN</code> 的值一样。</p><p>在现代浏览器中（ES5 环境）， <code>NaN</code> 属性是一个不可配置（non-configurable）、不可写（non-writable）的属性。但在 ES3 中，这个属性的值是可以被更改的，但是也应该避免覆盖。</p><p>编码中很少直接使用到 <code>NaN</code>。通常都是在计算失败时，作为 <code>Math</code> 的某个方法的返回值出现的（例如：<code>Math.sqrt(-1)</code>）或者尝试将一个字符串解析成数字但失败了的时候（例如：<code>parseInt(&quot;blabla&quot;)</code>）。</p><p>在ECMAScript中，0、+0或-0相除会返回NaN：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// NaN</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token operator">/</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><p>JavaScript 的字符串类型用于表示文本数据。它是一组 16 位的无符号整数值的元素。在字符串中的每个元素占据了字符串的位置。第一个元素的索引为 0，下一个是索引 1，依此类推。字符串的长度是它的元素的数量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>
<span class="token string">&#39;1234&#39;</span><span class="token punctuation">;</span>
<span class="token string">&#39;one line \\n another line&#39;</span><span class="token punctuation">;</span>
<span class="token string">&quot;John&#39;s cat&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="符号" tabindex="-1"><a class="header-anchor" href="#符号" aria-hidden="true">#</a> 符号</h3><p>Symbol（符号）是ECMAScript 6新增的数据类型。符号是原始值，且符号实例是唯一、不可变的。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险。</p><p>符号用来创建唯一记号，进而用作非字符串形式的对象属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> sym<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// symbol</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="引用数据类型" tabindex="-1"><a class="header-anchor" href="#引用数据类型" aria-hidden="true">#</a> 引用数据类型</h2><p>引用类型通常叫做类（Class），也就是说，遇到引用值，所处理的就是对象。</p><p>在 ECMA-262 标准中根本没有出现 类 这个词，而是定义了 对象定义，逻辑上等价于其他程序设计语言中的类。</p><p>对象是由 new 运算符加上要实例化的对象的名字创建的。</p><p>例如，下面的代码创建 Object 对象的实例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种语法与 Java 语言的相似，不过当有不止一个参数时，ECMAScript 要求使用括号。</p><p>如果没有参数，如以下代码所示，括号可以省略：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>括号不是必需的，但是为了避免混乱，最好使用括号。</p>`,56);function k(m,b){const s=i("router-link");return l(),p("div",null,[r,n("nav",u,[n("ul",null,[n("li",null,[e(s,{to:"#原始数据类型"},{default:o(()=>[a("原始数据类型")]),_:1}),n("ul",null,[n("li",null,[e(s,{to:"#空值"},{default:o(()=>[a("空值")]),_:1})]),n("li",null,[e(s,{to:"#未定义值"},{default:o(()=>[a("未定义值")]),_:1})]),n("li",null,[e(s,{to:"#布尔值"},{default:o(()=>[a("布尔值")]),_:1})]),n("li",null,[e(s,{to:"#数字"},{default:o(()=>[a("数字")]),_:1})]),n("li",null,[e(s,{to:"#字符串"},{default:o(()=>[a("字符串")]),_:1})]),n("li",null,[e(s,{to:"#符号"},{default:o(()=>[a("符号")]),_:1})])])]),n("li",null,[e(s,{to:"#引用数据类型"},{default:o(()=>[a("引用数据类型")]),_:1})])])]),v])}const g=t(d,[["render",k],["__file","1.html.vue"]]);export{g as default};
